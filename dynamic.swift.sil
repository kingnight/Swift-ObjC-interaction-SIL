sil_stage raw

import Builtin
import Swift
import SwiftShims

import Foundation

class Demo {
  func test()
  @objc func testobjc()
  @objc dynamic func testdynamic()
  init()
  @objc deinit
}

// main
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

// Demo.test()
sil hidden [ossa] @$s7dynamic4DemoC4testyyF : $@convention(method) (@guaranteed Demo) -> () {
// %0                                             // user: %1
bb0(%0 : @guaranteed $Demo):
  debug_value %0 : $Demo, let, name "self", argno 1 // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s7dynamic4DemoC4testyyF'

// Demo.testobjc()
sil hidden [ossa] @$s7dynamic4DemoC8testobjcyyF : $@convention(method) (@guaranteed Demo) -> () {
// %0                                             // user: %1
bb0(%0 : @guaranteed $Demo):
  debug_value %0 : $Demo, let, name "self", argno 1 // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s7dynamic4DemoC8testobjcyyF'

// @objc Demo.testobjc()
sil hidden [thunk] [ossa] @$s7dynamic4DemoC8testobjcyyFTo : $@convention(objc_method) (Demo) -> () {
// %0                                             // user: %1
bb0(%0 : @unowned $Demo):
  %1 = copy_value %0 : $Demo                      // users: %6, %2
  %2 = begin_borrow %1 : $Demo                    // users: %5, %4
  // function_ref Demo.testobjc()
  %3 = function_ref @$s7dynamic4DemoC8testobjcyyF : $@convention(method) (@guaranteed Demo) -> () // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed Demo) -> () // user: %7
  end_borrow %2 : $Demo                           // id: %5
  destroy_value %1 : $Demo                        // id: %6
  return %4 : $()                                 // id: %7
} // end sil function '$s7dynamic4DemoC8testobjcyyFTo'

// Demo.testdynamic()
sil hidden [ossa] @$s7dynamic4DemoC11testdynamicyyF : $@convention(method) (@guaranteed Demo) -> () {
// %0                                             // user: %1
bb0(%0 : @guaranteed $Demo):
  debug_value %0 : $Demo, let, name "self", argno 1 // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s7dynamic4DemoC11testdynamicyyF'

// @objc Demo.testdynamic()
sil hidden [thunk] [ossa] @$s7dynamic4DemoC11testdynamicyyFTo : $@convention(objc_method) (Demo) -> () {
// %0                                             // user: %1
bb0(%0 : @unowned $Demo):
  %1 = copy_value %0 : $Demo                      // users: %6, %2
  %2 = begin_borrow %1 : $Demo                    // users: %5, %4
  // function_ref Demo.testdynamic()
  %3 = function_ref @$s7dynamic4DemoC11testdynamicyyF : $@convention(method) (@guaranteed Demo) -> () // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed Demo) -> () // user: %7
  end_borrow %2 : $Demo                           // id: %5
  destroy_value %1 : $Demo                        // id: %6
  return %4 : $()                                 // id: %7
} // end sil function '$s7dynamic4DemoC11testdynamicyyFTo'

// Demo.__allocating_init()
sil hidden [ossa] @$s7dynamic4DemoCACycfC : $@convention(method) (@thick Demo.Type) -> @owned Demo {
bb0(%0 : $@thick Demo.Type):
  %1 = alloc_ref $Demo                            // user: %3
  // function_ref Demo.init()
  %2 = function_ref @$s7dynamic4DemoCACycfc : $@convention(method) (@owned Demo) -> @owned Demo // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned Demo) -> @owned Demo // user: %4
  return %3 : $Demo                               // id: %4
} // end sil function '$s7dynamic4DemoCACycfC'

// Demo.init()
sil hidden [ossa] @$s7dynamic4DemoCACycfc : $@convention(method) (@owned Demo) -> @owned Demo {
// %0                                             // users: %2, %1
bb0(%0 : @owned $Demo):
  debug_value %0 : $Demo, let, name "self", argno 1 // id: %1
  %2 = mark_uninitialized [rootself] %0 : $Demo   // users: %4, %3
  %3 = copy_value %2 : $Demo                      // user: %5
  destroy_value %2 : $Demo                        // id: %4
  return %3 : $Demo                               // id: %5
} // end sil function '$s7dynamic4DemoCACycfc'

// Demo.deinit
sil hidden [ossa] @$s7dynamic4DemoCfd : $@convention(method) (@guaranteed Demo) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : @guaranteed $Demo):
  debug_value %0 : $Demo, let, name "self", argno 1 // id: %1
  %2 = unchecked_ref_cast %0 : $Demo to $Builtin.NativeObject // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
  return %3 : $Builtin.NativeObject               // id: %4
} // end sil function '$s7dynamic4DemoCfd'

// Demo.__deallocating_deinit
sil hidden [ossa] @$s7dynamic4DemoCfD : $@convention(method) (@owned Demo) -> () {
// %0                                             // users: %6, %3, %1
bb0(%0 : @owned $Demo):
  debug_value %0 : $Demo, let, name "self", argno 1 // id: %1
  // function_ref Demo.deinit
  %2 = function_ref @$s7dynamic4DemoCfd : $@convention(method) (@guaranteed Demo) -> @owned Builtin.NativeObject // user: %4
  %3 = begin_borrow %0 : $Demo                    // users: %5, %4
  %4 = apply %2(%3) : $@convention(method) (@guaranteed Demo) -> @owned Builtin.NativeObject // user: %7
  end_borrow %3 : $Demo                           // id: %5
  end_lifetime %0 : $Demo                         // id: %6
  %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $Demo // user: %8
  dealloc_ref %7 : $Demo                          // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$s7dynamic4DemoCfD'

sil_vtable Demo {
  #Demo.test!1: (Demo) -> () -> () : @$s7dynamic4DemoC4testyyF	// Demo.test()
  #Demo.testobjc!1: (Demo) -> () -> () : @$s7dynamic4DemoC8testobjcyyF	// Demo.testobjc()
  #Demo.init!allocator.1: (Demo.Type) -> () -> Demo : @$s7dynamic4DemoCACycfC	// Demo.__allocating_init()
  #Demo.deinit!deallocator.1: @$s7dynamic4DemoCfD	// Demo.__deallocating_deinit
}



